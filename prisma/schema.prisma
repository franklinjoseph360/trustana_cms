// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
}

model Category {
  id               String             @id @default(uuid())
  name             String
  slug             String
  isLeaf           Boolean            @default(false)
  parentId         String?
  parent           Category?          @relation("CategoryToChildren", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children         Category[]         @relation("CategoryToChildren")
  products         Product[]

  attributeLinks   CategoryAttributeLink[] @relation("CategoryToAttributeLinks")

  parentPaths      CategoryTreePath[] @relation("ChildToTreePath")
  childPaths       CategoryTreePath[] @relation("ParentToTreePath")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt

  @@index([parentId])
  @@unique([name, parentId])
  @@unique([slug, parentId])
}

model CategoryTreePath {
  parentCategoryId String
  childCategoryId  String
  depth            Int

  parentCategory   Category @relation("ParentToTreePath", fields: [parentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childCategory    Category @relation("ChildToTreePath",  fields: [childCategoryId],  references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([parentCategoryId, childCategoryId])
  @@index([childCategoryId])
  @@index([parentCategoryId])
}

model Product {
  id          String    @id @default(uuid())
  name        String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  attributes  ProductAttributeValue[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([categoryId])
}

model Attribute {
  id         String                    @id @default(uuid())
  name       String
  slug       String
  isGlobal   Boolean                   @default(false)
  type       AttributeType             @default(TEXT)

  links      CategoryAttributeLink[]   @relation("AttributeToCategoryLinks")

  values     ProductAttributeValue[]
  createdAt  DateTime                  @default(now())
  updatedAt  DateTime                  @updatedAt

  @@unique([name])
  @@unique([slug])
  @@index([isGlobal])
}

model CategoryAttributeLink {
  categoryId  String
  attributeId String

  category    Category  @relation("CategoryToAttributeLinks", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attribute   Attribute @relation("AttributeToCategoryLinks", fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([categoryId, attributeId])
  @@index([attributeId])
  @@index([categoryId])
}

model ProductAttributeValue {
  productId    String
  attributeId  String

  valueString  String?
  valueNumber  Float?
  valueBoolean Boolean?
  valueJson    Json?

  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attribute    Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([productId, attributeId])
  @@index([attributeId])
  @@index([productId])
}
