// prisma/schema.prisma

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  JSON
}

model Category {
  id     String  @id @default(uuid())
  name   String
  slug   String
  isLeaf Boolean @default(false)

  parentId String?
  parent   Category?  @relation("CategoryToChildren", fields: [parentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  children Category[] @relation("CategoryToChildren")

  // standard relation to Product
  products Product[]

  // link-table back-relations
  productLinks   CategoryProductLink[]
  attributeLinks CategoryAttributeLink[] @relation("CategoryToAttributeLinks")

  // closure table for tree paths
  parentPaths CategoryTreePath[] @relation("ChildToTreePath")
  childPaths  CategoryTreePath[] @relation("ParentToTreePath")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, parentId])
  @@unique([slug, parentId])
  @@index([parentId])
}

model CategoryTreePath {
  parentCategoryId String
  childCategoryId  String
  depth            Int

  parentCategory Category @relation("ParentToTreePath", fields: [parentCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childCategory  Category @relation("ChildToTreePath", fields: [childCategoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([parentCategoryId, childCategoryId])
  @@index([childCategoryId])
  @@index([parentCategoryId])
}

model Product {
  id   String @id @default(uuid())
  name String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  // back-relations to value and link tables
  attributes     ProductAttributeValue[]
  attributeLinks ProductAttributeLink[]
  categoryLinks  CategoryProductLink[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attribute {
  id   String        @id @default(uuid())
  name String
  slug String        @unique
  type AttributeType

  // back-relations to value and link tables
  values        ProductAttributeValue[]
  productLinks  ProductAttributeLink[]
  categoryLinks CategoryAttributeLink[] @relation("AttributeToCategoryLinks")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryAttributeLink {
  categoryId  String
  attributeId String

  category  Category  @relation("CategoryToAttributeLinks", fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  attribute Attribute @relation("AttributeToCategoryLinks", fields: [attributeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([categoryId, attributeId])
  @@index([attributeId])
  @@index([categoryId])
}

model CategoryProductLink {
  id         String @id @default(uuid())
  categoryId String
  productId  String

  category Category @relation(fields: [categoryId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())

  @@unique([categoryId, productId])
  @@index([categoryId])
  @@index([productId])
}

model ProductAttributeLink {
  id          String @id @default(uuid())
  productId   String
  attributeId String

  product   Product   @relation(fields: [productId], references: [id])
  attribute Attribute @relation(fields: [attributeId], references: [id])

  createdAt DateTime @default(now())

  @@unique([productId, attributeId])
  @@index([attributeId])
  @@index([productId])
}

model ProductAttributeValue {
  id          String @id @default(uuid())
  productId   String
  attributeId String

  product   Product   @relation(fields: [productId], references: [id])
  attribute Attribute @relation(fields: [attributeId], references: [id])

  // add your value columns here: textValue, numberValue, booleanValue, jsonValue, etc.

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([productId, attributeId])
  @@index([productId])
  @@index([attributeId])
}
